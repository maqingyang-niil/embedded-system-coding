MX_USART1_UART_Init();
  @ brief  初始化相关接口
HAL_UART_Receive_IT(&huart1,(u8 *)aRXBuff_temp,1);
  @ 原型  HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
  @ brief  打开串口
  @ param  UART_HandleTypeDef *huart  接收串口
  @ param  uint8_t *pData  接收数据的缓存区指针
  @ param  uint16_t Size  接收字节数
HAL_UART_Transmit(&huart1,(u8*)ERROR,strlen(ERROR),0xffff);
  @ 原型  HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
  @ brief  将数据发送到屏幕上
  @ param  UART_HandleTypeDef *huart  发送到的串口
  @ param  const uint8_t *pData  被发送数据的指针
  @ param  uint16_t Size  发送的数据字节长度
  @ param  uint32_t Timeout  最大发送时间
void HAL_UART_RxCpltCallback(UART_HandleTypeDef*huart)
{
	if (huart==&huart1)
	{
		Tx=Rx;
		HAL_UART_Transmit(&huart1,&Tx,1,1000);
		HAL_UART_Receive_IT(&huart1,&Rx,1);
	}
}
  @ brief  以中断的方式打开串口，接收数据，比较串口确保从指定的串口接收数据，接收的数据存储在Rx中，并将其传递给Tx（收发数据要隔离），
        将Tx中的数据发送出去，再次打开串口（如果没有HAL_UART_Receive_IT(&huart1,&Rx,1)，串口在进行完一次收发数据后被关上了，所以
        想要进行连续的收发数据，必须在一次收发结束后再次打开串口）。
